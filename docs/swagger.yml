openapi: 3.0.0
info:
  title: booQ
  version: "2.0.0"
  description: booQサーバーのAPIです。
  contact:
    name: traP
    url: 'https://github.com/traPtitech/booQ'
servers:
  - url: 'https://booq.trap.jp/api'
    description: production
  - url: 'https://booq-dev.trapti.tech/api'
    description: staging
  - url: 'http://localhost:3000/api'
    description: local

tags:
- name: "items"
  description: "物品に関するAPI"
- name: "comments"
  description: "コメントに関するAPI"
- name: "logs"
  description: "履歴に関するAPI"
- name: "likes"
  description: "物品のいいねに関するAPI"
- name: "owners"
  description: "物品の所有者に関するAPI"
- name: "tags"
  description: "タグに関するAPI"
- name: "users"
  description: "ユーザーに関するAPI"
- name: "files"
  description: "画像アップロードに関するAPI"

paths:
  /users:
    get:
      operationId: getUsers
      tags:
      - "users"
      summary: "ユーザー一覧を取得します。"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/user"
    put:
      operationId: editUser
      tags:
      - "users"
      summary: "ユーザーの情報を変更します。主に権限の変更用です。"
      requestBody:
        description: "権限の変更は権限を持っているユーザーからしかできません。"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '400':
          description: "変更がありません"
        '403':
          description: "権限がありません"

  /users/me:
    get:
      operationId: getMe
      tags:
      - "users"
      summary: "自分の情報を取得します。存在しない場合はユーザーを作成します。"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

  /items:
    get:
      operationId: getItems
      tags:
      - "items"
      summary: "物品の一覧を取得します。"
      parameters:
      - schema:
          type: "string"
        name: "user"
        in: "query"
        description: "指定したユーザーの所有する物品一覧を取得します。"
      - schema:
          type: "string"
        name: "search"
        in: "query"
        description: "名称が部分一致する物品一覧を取得します。"
      - schema:
          type: "string"
        name: "rental"
        in: "query"
        description: "指定したユーザーの借りている物品一覧を取得します。"
      # - schema:
      #     type: "integer"
      #   name: "limit"
      #   in: "query"
      #   description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
      # - schema:
      #     type: "integer"
      #   name: "offset"
      #   in: "query"
      #   description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
      # - schema:
      #     type: "integer"
      #   name: "type"
      #   in: "query"
      #   description: "リクエストした物品タイプに合う物品一覧を取得します。"
      # - schema:
      #     type: "string"
      #   name: "tag"
      #   in: "query"
      #   description: "リクエストしたタグのついている物品一覧を取得します。"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemSummary"
    post:
      operationId: postItem
      tags:
      - "items"
      summary: "物品を新しく登録します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/itemPosted"
      responses:
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemPosted"
        '400':
          description: "リクエストボディが不正です。"

  /items/:id:
    get:
      operationId: getItem
      tags:
      - "items"
      summary: "物品の詳細情報を取得します。"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itemDetail"
    put:
      operationId: editItem
      tags:
      - "items"
      summary: "物品の情報を変更します。(所有者と管理者のみ)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/itemPosted"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        '400':
          description: "リクエストボディが不正です。"
        '403':
          description: "権限がありません。"
    delete:
      operationId: deleteItem
      tags:
      - "items"
      summary: "物品を削除します。(管理者のみ)"
      responses:
        '200':
          description: "OK"
        '403':
          description: "権限がありません。"

  /items/:id/owners:
    post:
      operationId: postItemOwners
      tags:
      - "owners"
      summary: "物品の所有者を追加します。"
      description: "他者の所有権を操作する場合は権限が必要です。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ownership"
      responses:
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ownership"
        '403':
          description: "権限がありません。"
    put:
      operationId: editItemOwners
      tags:
      - "owners"
      summary: "物品の所有者を編集します。(所有者と管理者のみ)"
      description: "他者の所有権を操作する場合は権限が必要です。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ownership"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ownership"
        '403':
          description: "権限がありません。"
    delete:
      operationId: deleteItemOwners
      tags:
      - "owners"
      summary: "物品の所有権を削除します。(所有者と管理者のみ)"
      description: "他者の所有権を操作する場合は権限が必要です。"
      responses:
        '200':
          description: "OK"
        '403':
          description: "権限がありません。"

  /items/:id/logs:
    post:
      operationId: postLog
      tags:
      - "logs"
      summary: "履歴を新しく登録します。"
      description: "itemとownerが紐づいていない場合はエラー(400)を返す必要があります。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/log"
      responses:
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/log"
        '400':
          description: "リクエストボディが不正です。"

  /items/:id/comments:
    post:
      operationId: postComment
      tags:
      - "comments"
      summary: "コメントを新規作成します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/comment"
      responses:
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
        '400':
          description: "リクエストボディが不正です。"

  /items/:id/likes:
    post:
      operationId: addLike
      tags:
      - "likes"
      summary: "物品にいいねをつけます。"
      description: "すでにいいねしている状態の場合、エラー(400)を返します。"
      responses:
        '200':
          description: "OK"
        '400':
          description: "エラーが発生しました。"
    delete:
      operationId: removeLike
      tags:
      - "likes"
      summary: "物品のいいねを取り消します。"
      description: "すでに所有済み状態の場合、エラー(400)を返します。"
      responses:
        '200':
          description: "OK"
        '400':
          description: "エラーが発生しました。"

  # /items/:id/tags:
  #   post:
  #     operationId: postItemTags
  #     tags:
  #     - "tags"
  #     summary: "itemIdと紐づけてタグを登録します。"
  #    requestBody:
  #      description: "複数一気に登録するので配列である必要があります。"
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            type: "object"
  #            example:
  #              id: [1, 2]
  #     responses:
  #       '200':
  #         description: "OK"
  #         content:
  #           application/json:
  #             schema:
  #               type: "object"
  #               example:
  #                 - id: 1
  #                   name: "小説"
  #                 - id: 2
  #                   name: "天気の子"
  #       '400':
  #         description: "リクエストボディが不正です。"

  # /items/:itemId/tags/:tagId:
  #   delete:
  #     operationId: deleteItemTag
  #     tags:
  #     - "tags"
  #     summary: "物品に登録されているタグを削除します。"
  #     description: "itemとtagが紐づいていない場合はエラー(400)を返す必要があります。"
  #     responses:
  #       '200':
  #         description: "OK"
  #       '400':
  #         description: "エラーが発生しました。"

  # /tags:
  #   get:
  #     operationId: getTags
  #     tags:
  #     - "tags"
  #     summary: "タグ一覧を取得します。"
  #     responses:
  #       '200':
  #         description: "OK"
  #        content:
  #          application/json:
  #            schema:
  #              type: "object"
  #              example:
  #                - id: 1
  #                  name: "小説"
  #                - id: 2
  #                  name: "天気の子"
  #   post:
  #     operationId: postTag
  #     tags:
  #     - "tags"
  #     summary: "タグを追加します。"
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: "object"
  #             example:
  #               name: "小説"
  #     responses:
  #       '200':
  #         description: "OK"
  #        content:
  #          application/json:
  #            schema:
  #              type: "object"
  #              example:
  #                id: 1
  #                name: "小説"
  #       '400':
  #         description: "リクエストボディが不正です。"

  /comments:
    get:
      operationId: getComments
      tags:
      - "comments"
      summary: "コメント一覧を取得します。"
      parameters:
      - schema:
          type: "string"
        name: "user"
        in: "query"
        description: "特定のユーザーの投稿したコメント一覧を取得します。"
      # - schema:
      #     type: "integer"
      #   name: "limit"
      #   in: "query"
      #   description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
      # - schema:
      #     type: "integer"
      #   name: "offset"
      #   in: "query"
      #   description: "取得したいコメントの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/comment"

  # /comments/:id:
  #   put:
  #     operationId: editComment
  #     tags:
  #     - "comments"
  #     summary: "コメントを編集します。"
  #     description: "実行できるのは投稿したユーザーと管理者だけです。"
  #     requestBody:
  #       description: "実行できるのは投稿したユーザーと管理者だけです。変更できるのはtextのみです。"
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: "object"
  #             example:
  #               text: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
  #     responses:
  #       '200':
  #         description: "OK"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/comment"
  #       '403':
  #         description: "権限がありません。"
  #   delete:
  #     operationId: deleteComment
  #     tags:
  #     - "comments"
  #     summary: "コメントを削除します。"
  #     description: "実行できるのは投稿したユーザーと管理者だけです。"
  #     responses:
  #       '200':
  #         description: "OK"
  #       '403':
  #         description: "権限がありません。"

  # /logs:
  #   get:
  #     operationId: getLogs
  #     tags:
  #     - "logs"
  #     summary: "履歴の一覧を取得します。"
  #     parameters:
  #     - schema:
  #         type: "string"
  #       name: "user"
  #       in: "query"
  #       description: "特定のユーザーの履歴一覧を取得します。"
  #     - schema:
  #         type: "integer"
  #       name: "limit"
  #       in: "query"
  #       description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
  #     - schema:
  #         type: "integer"
  #       name: "offset"
  #       in: "query"
  #       description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
  #     responses:
  #       '200':
  #         description: "OK"
  #        content:
  #          application/json:
  #            schema:
  #              type: "array"
  #              items:
  #                $ref: "#/components/schemas/log"
  #   delete:
  #     operationId: deleteLog
  #     tags:
  #     - "logs"
  #     summary: "履歴を取り消します。(管理者のみ)"
  #     responses:
  #       '200':
  #         description: "OK"
  #       '403':
  #         description: "権限がありません。"

  /files:
    post:
      operationId: postFile
      tags:
      - "files"
      summary: "画像ファイルをアップロードします。"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
                  description: "3MBまでのJPG, PNGファイル"
      responses:
        '201':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/file"
        '400':
          description: "不正なリクエストです。"

  /files/:id:
    get:
      operationId: getFile
      tags:
      - "files"
      summary: "画像ファイルをダウンロードします。"
      responses:
        '200':
          description: "OK"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          description: "ファイルが存在しません。"

components:
  schemas:
    itemType:
      type: integer
      title: ItemType
      description: |-
        アイテム種別
        0: 個人所有
        1: 備品
        2: 支援課所有
      enum:
        - 0
        - 1
        - 2
      x-enum-varnames:
        - individual
        - equipment
        - sienka
    itemPosted:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        name:
          type: "string"
          example: "小説　天気の子"
        code:
          type: "integer"
          example: 9784041026403
        type:
          $ref: "#/components/schemas/itemType"
        description:
          type: "string"
          example: "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。"
        imgUrl:
          type: "string"
          example: "https://cover.openbd.jp/9784041026403.jpg"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
    item:
      allOf:
        - $ref: "#/components/schemas/itemPosted"
        - type: "object"
          properties:
            owners:
              type: "array"
              items:
                $ref: "#/components/schemas/owner"
              readOnly: true
            latestLogs:
              type: "array"
              items:
                $ref: "#/components/schemas/log"
              readOnly: true
            logs:
              type: "array"
              items:
                $ref: "#/components/schemas/log"
              readOnly: true
            rentalUsers:
              type: "array"
              items:
                $ref: "#/components/schemas/rentalUser"
              readOnly: true
            # tags:
            #   type: "array"
            #   items:
            #     $ref: "#/components/schemas/tag"
            #   readOnly: true
            comments:
              type: "array"
              items:
                $ref: "#/components/schemas/comment"
              readOnly: true
    itemSummary:
      allOf:
        - $ref: "#/components/schemas/item"
        - type: "object"
          properties:
            likeCount:
              type: "integer"
              example: 1
              readOnly: true
    itemDetail:
      allOf:
        - $ref: "#/components/schemas/item"
        - type: "object"
          properties:
            likes:
              type: "array"
              items:
                $ref: "#/components/schemas/user"
              readOnly: true
    comment:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        itemId:
          type: "integer"
          example: 1
          readOnly: true
        userId:
          type: "integer"
          example: 1
          readOnly: true
        user:
          $ref: "#/components/schemas/user"
        text:
          type: "string"
          example: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
    user:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        name:
          type: "string"
          format: "traq_id"
          example: "nagatech"
        displayName:
          type: "string"
          example: "ながてち"
          readOnly: true
        admin:
          type: "boolean"
          example: true
    logType:
      type: integer
      title: LogType
      description: |-
        ログ種類
        0: 借りる
        1: 返却
      enum:
        - 0
        - 1
      x-enum-varnames:
        - borrow
        - return
    log:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        itemId:
          type: "integer"
          example: 1
          readOnly: true
        userId:
          type: "integer"
          example: 1
          readOnly: true
        user:
          $ref: "#/components/schemas/user"
        ownerId:
          type: "integer"
          example: 1
        owner:
          $ref: "#/components/schemas/user"
        type:
          $ref: "#/components/schemas/logType"
        purpose:
          type: "string"
          example: "読みたかったから。"
        dueDate:
          type: "string"
          format: "date-time"
          example: "2019-07-30T23:30:00Z"
        count:
          type: "integer"
          example: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
          readOnly: true
    ownership:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        itemId:
          type: "integer"
          example: 1
          readOnly: true
        userId:
          type: "integer"
          example: 1
        rentalable:
          type: "boolean"
          example: true
        count:
          type: "integer"
          example: 1
    # tag:
    #   type: "object"
    #   properties:
    #     id:
    #       type: "integer"
    #       example: 1
    #     name:
    #       type: "string"
    #       example: "小説"
    rentalUser:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        count:
          type: "integer"
          example: 1
        ownerId:
          type: "integer"
          example: 1
        userId:
          type: "integer"
          example: 1
        owner:
          $ref: "#/components/schemas/user"
        user:
          $ref: "#/components/schemas/user"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
        deletedAt:
          type: "string"
          format: "date-time"
          example: "2019-07-28T22:00:00Z"
    owner:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/user"
        rentalable:
          type: "boolean"
          example: true
        count:
          type: "integer"
          example: 1
    file:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          description: "ファイルID"
        url:
          type: "string"
          example: "/api/files/1"
          description: "ファイルURL"
