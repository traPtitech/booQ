swagger: "2.0"
info:
  title: booQ
  version: "2.0.0"
  description: booQサーバーのAPIです。
  contact:
    name: traP
    url: 'https://github.com/traPtitech/booQ'
host: booq.jp
basePath: /api/
schemes:
  - https

tags:
- name: "items"
  description: "物品に関するAPI"
- name: "comments"
  description: "コメントに関するAPI"
- name: "logs"
  description: "履歴に関するAPI"
- name: "likes"
  description: "物品のいいねに関するAPI"
- name: "owners"
  description: "物品の所有者に関するAPI"
- name: "tags"
  description: "タグに関するAPI"
- name: "users"
  description: "ユーザーに関するAPI"
- name: "files"
  description: "画像アップロードに関するAPI"

paths:
  /users:
    get:
      operationId: getUsers
      tags:
      - "users"
      summary: "ユーザー一覧を取得します。"
      parameters:
      - name: "name"
        in: "query"
        description: "取得したいユーザーのIDを指定します。"
        type: "string"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/user"
        '404':
          description: "見つかりませんでした。"
    put:
      operationId: editUser
      tags:
      - "users"
      summary: "ユーザーの情報を変更します。主に権限の変更用です。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        description: "権限の変更は権限を持っているユーザーからしかできないようにします。"
        required: true
        schema:
          type: "object"
          example:
            name: "nagatech"
            displayName: "ながてち"
            admin: true
      responses:
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/user"
        '403':
          description: "権限がありません"

  /users/me:
    get:
      operationId: getMe
      tags:
      - "users"
      summary: "自分の情報を取得します。存在しない場合はユーザーを作成します。"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/user"

  /items:
    get:
      operationId: getItems
      tags:
      - "items"
      summary: "物品の一覧を取得します。"
      parameters:
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      - name: "type"
        in: "query"
        description: "リクエストした物品タイプに合う物品一覧を取得します。"
        type: "integer"
      - name: "user"
        in: "query"
        description: "特定のユーザーの所有する物品一覧を取得します。"
        type: "string"
      - name: "tag"
        in: "query"
        description: "リクエストしたタグのついている物品一覧を取得します。"
        type: "string"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/get_items"
    post:
      operationId: postItem
      tags:
      - "items"
      summary: "物品を新しく登録します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            name: "小説　天気の子"
            code: 9784041026403
            type: 1
            description:  "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。"
            imgUrl: "https://cover.openbd.jp/9784041026403.jpg"
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/item"
        '400':
          description: "リクエストボディが不正です。"

  /items/:id:
    get:
      operationId: getItem
      tags:
      - "items"
      summary: "物品の詳細情報を取得します。"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/get_items_id"
    put:
      operationId: editItem
      tags:
      - "items"
      summary: "物品の情報を変更します。(所有者と管理者のみ)"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            name: "小説　天気の子"
            code: 9784041026403
            type: 1
            description:  "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。 （C）2019「天気の子」製作委員会"
            imgUrl: "https://cover.openbd.jp/9784041026403.jpg"
      responses:
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/item"
        '400':
          description: "リクエストボディが不正です。"
        '403':
          description: "権限がありません。"
    delete:
      operationId: deleteItem
      tags:
      - "items"
      summary: "物品を削除します。(管理者のみ)"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
        '403':
          description: "権限がありません。"

  /items/:id/owners:
    post:
      operationId: postItemOwners
      tags:
      - "owners"
      summary: "物品の所有者を追加します。"
      description: "他者の所有権を操作する場合は権限が必要です。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            userId: 1
            rentalable: true
            count: 1
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/ownership"
        '403':
          description: "権限がありません。"
    put:
      operationId: editItemOwners
      tags:
      - "owners"
      summary: "物品の所有者を編集します。(所有者と管理者のみ)"
      description: "他者の所有権を操作する場合は権限が必要です。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            userId: 1
            rentalable: true
            count: 1
      responses:
        '200':
          description: "OK"
          schema:
            $ref: "#/definitions/ownership"
        '403':
          description: "権限がありません。"
    delete:
      operationId: deleteItemOwners
      tags:
      - "owners"
      summary: "物品の所有権を削除します。(所有者と管理者のみ)"
      description: "他者の所有権を操作する場合は権限が必要です。"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
        '403':
          description: "権限がありません。"

  /items/:id/logs:
    post:
      operationId: postLog
      tags:
      - "logs"
      summary: "履歴を新しく登録します。"
      description: "itemとownerが紐づいていない場合はエラー(400)を返す必要があります。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            ownerId: 1
            type: 0
            purpose: "読みたかったから。"
            dueDate: "2019/07/30 23:30:00"
            count: 1
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/log"
        '400':
          description: "リクエストボディが不正です。"

  /items/:id/comments:
    post:
      operationId: postComment
      tags:
      - "comments"
      summary: "コメントを新規作成します。"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "RequestBody"
        required: true
        schema:
          type: "object"
          example:
            text: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
      responses:
        '201':
          description: "Created"
          schema:
            $ref: "#/definitions/comment"
        '400':
          description: "リクエストボディが不正です。"

  /items/:id/likes:
    post:
      operationId: addLike
      tags:
      - "likes"
      summary: "物品にいいねをつけます。"
      description: "すでにいいねしている状態の場合、エラー(400)を返します。"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
        '400':
          description: "エラーが発生しました。"
    delete:
      operationId: removeLike
      tags:
      - "likes"
      summary: "物品のいいねを取り消します。"
      description: "すでに所有済み状態の場合、エラー(400)を返します。"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
        '400':
          description: "エラーが発生しました。"

  # /items/:id/tags:
  #   post:
  #     operationId: postItemTags
  #     tags:
  #     - "tags"
  #     summary: "itemIdと紐づけてタグを登録します。"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "RequestBody"
  #       description: "複数一気に登録するので配列である必要があります。"
  #       required: true
  #       schema:
  #         type: "object"
  #         example:
  #           id: [1, 2]
  #     responses:
  #       '200':
  #         description: "OK"
  #         schema:
  #           type: "object"
  #           example:
  #             - id: 1
  #               name: "小説"
  #             - id: 2
  #               name: "天気の子"
  #       '400':
  #         description: "リクエストボディが不正です。"

  # /items/:itemId/tags/:tagId:
  #   delete:
  #     operationId: deleteItemTag
  #     tags:
  #     - "tags"
  #     summary: "物品に登録されているタグを削除します。"
  #     description: "itemとtagが紐づいていない場合はエラー(400)を返す必要があります。"
  #     produces:
  #     - "application/json"
  #     responses:
  #       '200':
  #         description: "OK"
  #       '400':
  #         description: "エラーが発生しました。"

  # /tags:
  #   get:
  #     operationId: getTags
  #     tags:
  #     - "tags"
  #     summary: "タグ一覧を取得します。"
  #     produces:
  #     - "application/json"
  #     responses:
  #       '200':
  #         description: "OK"
  #         schema:
  #           type: "object"
  #           example:
  #             - id: 1
  #               name: "小説"
  #             - id: 2
  #               name: "天気の子"
  #   post:
  #     operationId: postTag
  #     tags:
  #     - "tags"
  #     summary: "タグを追加します。"
  #     parameters:
  #     - in: "body"
  #       name: "RequestBody"
  #       required: true
  #       schema:
  #         type: "object"
  #         example:
  #           name: "小説"
  #     produces:
  #     - "application/json"
  #     responses:
  #       '200':
  #         description: "OK"
  #         schema:
  #           type: "object"
  #           example:
  #             id: 1
  #             name: "小説"
  #       '400':
  #         description: "リクエストボディが不正です。"

  /comments:
    get:
      operationId: getComments
      tags:
      - "comments"
      summary: "コメント一覧を取得します。"
      parameters:
      - name: "user"
        in: "query"
        description: "特定のユーザーの投稿したコメント一覧を取得します。"
        type: "string"
      - name: "limit"
        in: "query"
        description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
        type: "integer"
      - name: "offset"
        in: "query"
        description: "取得したいコメントの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
        type: "integer"
      produces:
      - "application/json"
      responses:
        '200':
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/get_comments"

  # /comments/:id:
  #   put:
  #     operationId: editComment
  #     tags:
  #     - "comments"
  #     summary: "コメントを編集します。"
  #     description: "実行できるのは投稿したユーザーと管理者だけです。"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "RequestBody"
  #       description: "実行できるのは投稿したユーザーと管理者だけです。変更できるのはtextのみです。"
  #       required: true
  #       schema:
  #         type: "object"
  #         example:
  #           text: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
  #     responses:
  #       '200':
  #         description: "OK"
  #         schema:
  #           $ref: "#/definitions/comment"
  #       '403':
  #         description: "権限がありません。"
  #   delete:
  #     operationId: deleteComment
  #     tags:
  #     - "comments"
  #     summary: "コメントを削除します。"
  #     description: "実行できるのは投稿したユーザーと管理者だけです。"
  #     produces:
  #     - "application/json"
  #     responses:
  #       '200':
  #         description: "OK"
  #       '403':
  #         description: "権限がありません。"

  # /logs:
  #   get:
  #     operationId: getLogs
  #     tags:
  #     - "logs"
  #     summary: "履歴の一覧を取得します。"
  #     parameters:
  #     - name: "user"
  #       in: "query"
  #       description: "特定のユーザーの履歴一覧を取得します。"
  #       type: "string"
  #     - name: "limit"
  #       in: "query"
  #       description: "取得したい件数を指定します。リクエストした件数が全部の件数より多い場合は全部の一覧になります。"
  #       type: "integer"
  #     - name: "offset"
  #       in: "query"
  #       description: "取得したいデータの開始場所を指定します。リクエストした件数が全部の件数より多い場合は空の配列が返ってきます。"
  #       type: "integer"
  #     produces:
  #     - "application/json"
  #     responses:
  #       '200':
  #         description: "OK"
  #         schema:
  #           type: "array"
  #           items:
  #             $ref: "#/definitions/get_logs"
  #   delete:
  #     operationId: deleteLog
  #     tags:
  #     - "logs"
  #     summary: "履歴を取り消します。(管理者のみ)"
  #     produces:
  #     - "application/json"
  #     responses:
  #       '200':
  #         description: "OK"
  #       '403':
  #         description: "権限がありません。"

  /files:
    post:
      operationId: postFile
      tags:
      - "files"
      summary: "画像ファイルをアップロードします。"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "formData"
        name: "file"
        type: "file"
        description: "3MBまでのJPG, PNGファイル"
      responses:
        '201':
          description: "OK"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                example: 1
                description: "ファイルID"
              url:
                type: "string"
                example: "/api/files/1"
                description: "ファイルURL"
        '400':
          description: "不正なリクエストです。"

  /files/:id:
    get:
      operationId: getFile
      tags:
      - "files"
      summary: "画像ファイルをダウンロードします。"
      produces:
      - "image/jpeg"
      responses:
        '200':
          description: "OK"
        '404':
          description: "ファイルが存在しません。"

definitions:
  item:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "小説　天気の子"
      code:
        type: "integer"
        example: 9784041026403
      type:
        type: "integer"
        example: 1
      description:
        type: "string"
        example: "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。"
      imgUrl:
        type: "string"
        example: "https://cover.openbd.jp/9784041026403.jpg"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
  comment:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      itemId:
        type: "integer"
        example: 1
      userId:
        type: "integer"
        example: 1
      text:
        type: "string"
        example: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
  user:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        format: "traq_id"
        example: "nagatech"
      displayName:
        type: "string"
        example: "ながてち"
      admin:
        type: "boolean"
        example: true
  log:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      itemId:
        type: "integer"
        example: 1
      userId:
        type: "integer"
        example: 1
      ownerId:
        type: "integer"
        example: 1
      type:
        type: "integer"
        example: 0
      purpose:
        type: "string"
        example: "読みたかったから。"
      dueDate:
        type: "string"
        format: "date-time"
        example: "2019-07-30T23:30:00Z"
      count:
        type: "integer"
        example: 1
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
  ownership:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      itemId:
        type: "integer"
        example: 1
      userId:
        type: "integer"
        example: 1
      rentalable:
        type: "boolean"
        example: true
      count:
        type: "integer"
        example: 1
  tag:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "小説"
  rental_user:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      count:
        type: "integer"
        example: 1
      ownerId:
        type: "integer"
        example: 1
      userId:
        type: "integer"
        example: 1
      owner:
        $ref: "#/definitions/user"
      user:
        $ref: "#/definitions/user"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      deletedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
  get_logs:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      itemId:
        type: "integer"
        example: 1
      user:
        $ref: "#/definitions/user"
      owner:
        $ref: "#/definitions/user"
      type:
        type: "integer"
        example: 0
      purpose:
        type: "string"
        example: "読みたかったから。"
      dueDate:
        type: "string"
        format: "date-time"
        example: "2019-07-30T23:30:00Z"
      count:
        type: "integer"
        example: 1
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
  get_ownerships:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/user"
      rentalable:
        type: "boolean"
        example: true
      count:
        type: "integer"
        example: 1
  get_comments:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      itemId:
        type: "integer"
        example: 1
      user:
        $ref: "#/definitions/user"
      comment:
        type: "string"
        example: "小説版は夏美の心理描写がよく描かれていて、映画版を補完するものになっている。あとがきと解説だけでも読む価値はあると思います。"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
  get_items:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "小説　天気の子"
      code:
        type: "integer"
        example: 9784041026403
      type:
        type: "integer"
        example: 1
      owners:
        type: "array"
        items:
          $ref: "#/definitions/get_ownerships"
      latestLogs:
        type: "array"
        items:
          $ref: "#/definitions/get_logs"
      logs:
        type: "array"
        items:
          $ref: "#/definitions/get_logs"
      rentalUsers:
        type: "array"
        items:
          $ref: "#/definitions/rental_user"
      # tags:
      #   type: "array"
      #   items:
      #     $ref: "#/definitions/tag"
      likeCount:
        type: "integer"
        example: 1
      likes:
        type: "array"
        items:
          $ref: "#/definitions/user"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/get_comments"
      imgUrl:
        type: "string"
        example: "https://cover.openbd.jp/9784041026403.jpg"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
  get_items_id:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example:  "小説　天気の子"
      code:
        type: "integer"
        example: 9784041026403
      type:
        type: "integer"
        example: 1
      owners:
        type: "array"
        items:
          $ref: "#/definitions/get_ownerships"
      description:
        type: "string"
        example: "高校1年の夏、帆高（ほだか）は離島から家出し、東京にやってきた。連日降り続ける雨の中、雑踏ひしめく都会の片隅で、帆高は不思議な能力を持つ少女・陽菜（ひな）に出会う。「ねぇ、今から晴れるよ」。それは祈るだけで、空を晴れに出来る力だった――。天候の調和が狂っていく時代に、運命に翻弄される少年と少女が自らの生き方を「選択」する物語。長編アニメーション映画『天気の子』の、新海誠監督自身が執筆した原作小説。"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/get_comments"
      rentalUsers:
        type: "array"
        items:
          $ref: "#/definitions/rental_user"
      latestLogs:
        type: "array"
        items:
          $ref: "#/definitions/get_logs"
      logs:
        type: "array"
        items:
          $ref: "#/definitions/get_logs"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/tag"
      likes:
        type: "array"
        items:
          $ref: "#/definitions/user"
      imgUrl:
        type: "string"
        example: "https://cover.openbd.jp/9784041026403.jpg"
      createdAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
      updatedAt:
        type: "string"
        format: "date-time"
        example: "2019-07-28T22:00:00Z"
